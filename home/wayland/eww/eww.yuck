;; ============================================================================
;; Main Window and Container Definitions
;; ============================================================================

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                     :y "0%"
                     :width "52px"
                     :height "100%"
                     :anchor "right center")
  :stacking "fg"
  :exclusive true
  :style-sheet "./eww.scss"
  (main-box))

(defwidget main-box []
  (box :orientation "v"
       :space-evenly false
       :class "main-container"
    (workspaces)
    (status-modules)))

(defwidget status-modules []
  (box :orientation "v"
       :space-evenly false
       :valign "end"
       :vexpand true
       :class "status-container"
    (systray :orientation "v")
    (top-modules)
    (bottom-modules)))

(defwidget top-modules []
  (box :orientation "v"
       :space-evenly false
       :class "top-modules-container"
       :spacing 4
    (wifi-simple) 
    (volume-module)
    (bluetooth-module)
    (power-profile)
    (battery)
    (brightness-module)))

(defwidget bottom-modules []
  (box :orientation "v"
       :space-evenly false
       :class "bottom-modules-container"
       :spacing 4
    ;;(notification-module)
    (clock-module)
    (power)))

;; ============================================================================
;; Workspace Module
;; ============================================================================

(defvar workspace_state "[]")
(defvar workspace_numbers '[
  "ëôë", "ëôí", "ëôì", "ëôî", "ëôï", "ëôñ", "ëôó", "ëôò", "ëôô", "ëôëëôê"
]')

(defpoll workspace_update :interval "1s"
  :initial "[]"
  :run-while true
  `niri msg -j workspaces | jq -c 'sort_by(.idx)'`)

(defwidget workspaces []
  (eventbox :onhover "${EWW_CMD} update workspace_state=\"$(niri msg -j workspaces | jq -c '.')\""
    (box :class "workspaces"
         :orientation "v"
         :space-evenly false
         :spacing 6
      (for workspace in {workspace_update}
        (workspace-button :workspace workspace)))))

(defwidget workspace-button [workspace]
  (button :class "workspace-btn ${workspace.is_focused ? "focused" : ""} ${workspace.is_active ? "active" : ""}"
          :onclick "niri msg workspace-switch ${workspace.id}"
          :tooltip "Workspace ${workspace.idx}"
    (box :orientation "v"
         :space-evenly false
         :spacing 2
      (label :class "workspace-number" 
             :text "${workspace_numbers[workspace.idx - 1] ?: workspace.idx}")
      (box :class "workspace-indicator ${workspace.is_focused ? "focused" : ""}"
           :height 2))))

;; ============================================================================
;; Audio Module
;; ============================================================================

(defvar volume_reveal false)

(defpoll volume :interval "1s"
  "wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print int($2 * 100)}'")

(defpoll volume_muted :interval "1s"
  "wpctl get-volume @DEFAULT_AUDIO_SINK@ | grep -q MUTED && echo true || echo false")

(defwidget volume-module []
  (eventbox :onhover "${EWW_CMD} update volume_reveal=true"
            :onhoverlost "${EWW_CMD} update volume_reveal=false"
            :class "module-container"
    (box :class "volume-module"
         :orientation "v"
         :space-evenly false
         :spacing 4
         :tooltip "Volume: ${volume}% ${volume_muted == 'true' ? '(Muted)' : ''}"
      (volume-button)
      (volume-slider))))

(defwidget volume-button []
  (button :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
          :class "module-button ${volume_muted == 'true' ? 'muted' : ''}"
    (box :orientation "v"
         :space-evenly false
         :spacing 2
      (label :class "volume-icon ${volume_muted == 'true' ? 'muted' : ''}" 
             :text "${volume_muted == 'true' ? 'Û∞ùü' :
                    volume == 0 ? 'Û∞ùü' :
                    volume < 30 ? 'Û∞ïø' :
                    volume < 70 ? 'Û∞ñÄ' : 'Û∞ïæ'}")
      (label :class "volume-text" 
             :text "${volume}"))))

(defwidget volume-slider []
  (revealer :transition "slideup"
            :reveal volume_reveal
            :duration "250ms"
    (scale :class "volume-slider"
           :orientation "v"
           :flipped true
           :min 0
           :max 150
           :height 240
           :value volume
           :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")))

;; ============================================================================
;; Network Module
;; ============================================================================

(defpoll wifi_status :interval "3s"
  :initial "{\"connected\": false, \"ssid\": \"\", \"signal\": 0}"
  `nmcli -t -f ACTIVE,SSID,SIGNAL dev wifi 2>/dev/null | awk -F: '
    BEGIN { printf "{\"connected\": false, \"ssid\": \"\", \"signal\": 0}" }
    $1 == "yes" { 
      gsub(/\"/, "\\\"", $2); 
      signal = ($3 == "" || $3 !~ /^[0-9]+$/) ? 0 : int($3);
      printf "{\"connected\": true, \"ssid\": \"%s\", \"signal\": %d}", $2, signal; 
      exit 
    }'`)

;; Simple WiFi toggle with Plasma Network Manager integration
(defwidget wifi-simple []
  (button :class "wifi-simple ${wifi_status.connected ? 'connected' : 'disconnected'}"
          :onclick "if [ '${wifi_status.connected}' = 'true' ]; then nmcli radio wifi off; else nmcli radio wifi on; fi"
          :onrightclick "plasma-nm"
          :tooltip "WiFi: ${wifi_status.connected ? wifi_status.ssid : 'Disconnected'} - Right click for settings"
    (box :orientation "v"
         :space-evenly false
      (label :class "wifi-icon"
             :text "${wifi_status.connected ? 
                    (wifi_status.signal >= 75 ? 'Û∞§®' :
                     wifi_status.signal >= 50 ? 'Û∞§•' :
                     wifi_status.signal >= 25 ? 'Û∞§¢' : 'Û∞§ü') : 'Û∞§Æ'}")
      (label :class "wifi-text"
             :text "${wifi_status.connected ? '${wifi_status.signal}' : 'OFF'}"))))

;; ============================================================================
;; System Modules (Bluetooth, Power Profile, Battery)
;; ============================================================================

(defpoll bluetooth :interval "5s"
  `bluetoothctl show | grep Powered | cut -f 2- -d ' '`)

(defwidget bluetooth-module []
  (button :class "module-button bluetooth ${bluetooth == 'yes' ? 'active' : 'inactive'}"
          :onclick "blueman-manager"
          :tooltip "Bluetooth ${bluetooth == 'yes' ? 'On' : 'Off'} - Click to open manager"
    (box :orientation "v"
         :space-evenly false
      (label :class "bluetooth-icon"
             :text {bluetooth == "yes" ? "" : "Û∞Ç≤"}))))

(defpoll power_profile :interval "5s"
  "powerprofilesctl get 2>/dev/null || echo 'balanced'")

(defwidget power-profile []
  (button :class "module-button power-profile"
          :onclick "powerprofilesctl set $(echo '${power_profile}' | awk '{print $1 == \"power-saver\" ? \"balanced\" : $1 == \"balanced\" ? \"performance\" : \"power-saver\"}') || makoctl notify 'Power Profile Error' 'Failed to switch profile'"
          :tooltip "Power Profile: ${power_profile} - Click to cycle"
    (label :class "power-profile-icon"
           :text {
      power_profile == "power-saver" ? "Û±àë" :
      power_profile == "balanced" ? "Û∞Åπ" :
      power_profile == "performance" ? "Û±êå" :
      ""
    })))

(defpoll battery :interval "30s"
  `cat /sys/class/power_supply/BAT0/capacity 2>/dev/null || cat /sys/class/power_supply/BAT1/capacity 2>/dev/null || echo "100"`)

(defpoll battery_status :interval "30s"
  `cat /sys/class/power_supply/BAT0/status 2>/dev/null || cat /sys/class/power_supply/BAT1/status 2>/dev/null || echo "Unknown"`)

(defwidget battery []
  (box :class "module-button battery ${battery < 20 ? 'critical' : battery < 40 ? 'warning' : ''} ${battery_status == 'Charging' ? 'charging' : ''}"
       :orientation "v"
       :space-evenly false
       :spacing 2
       :tooltip "Battery: ${battery}% ${battery_status == 'Charging' ? '(Charging)' : battery_status == 'Discharging' ? '(Discharging)' : ''}"
    (label :class "battery-icon"
           :text "${battery_status == 'Charging' ? 'Û∞ÇÑ' :
                  battery >= 90 ? 'Û∞Åπ' :
                  battery >= 80 ? 'Û∞ÇÇ' :
                  battery >= 70 ? 'Û∞ÇÅ' :
                  battery >= 60 ? 'Û∞ÇÄ' :
                  battery >= 50 ? 'Û∞Åø' :
                  battery >= 40 ? 'Û∞Åæ' :
                  battery >= 30 ? 'Û∞ÅΩ' :
                  battery >= 20 ? 'Û∞Åº' :
                  battery >= 10 ? 'Û∞Åª' : 'Û∞Å∫'}")
    (label :class "battery-text"
           :text "${battery}")))

;; ============================================================================
;; Brightness Module
;; ============================================================================

(defvar brightness_reveal false)

(defpoll brightness :interval "2s"
  :initial "50"
  `brightnessctl -m 2>/dev/null | cut -d',' -f4 | tr -d '%' | awk '{print ($0 == "" ? "50" : $0)}' || echo "50"`)

(defwidget brightness-module []
  (eventbox :onhover "${EWW_CMD} update brightness_reveal=true"
            :onhoverlost "${EWW_CMD} update brightness_reveal=false"
            :class "module-container"
    (box :class "brightness-module"
         :orientation "v"
         :space-evenly false
         :spacing 4
         :tooltip "Brightness: ${brightness}%"
      (brightness-button)
      (brightness-slider))))

(defwidget brightness-button []
  (button :class "module-button brightness"
    (box :orientation "v"
         :space-evenly false
         :spacing 2
      (label :class "brightness-icon"
             :text {brightness < 20 ? "Û∞Éû" :
                    brightness < 40 ? "Û∞Éü" :
                    brightness < 60 ? "Û∞Éù" :
                    brightness < 80 ? "Û∞É†" : "Û∞É°"})
      (label :class "brightness-text"
             :text "${brightness}"))))

(defwidget brightness-slider []
  (revealer :transition "slideup"
            :reveal brightness_reveal
            :duration "250ms"
    (scale :class "brightness-slider"
           :orientation "v"
           :flipped true
           :min 5
           :max 100
           :height 240
           :value brightness
           :onchange "brightnessctl set {}%")))

;; ============================================================================
;; Clock Module
;; ============================================================================

(defvar clock_reveal false)

(defpoll hours :interval "30s"
  "date '+%H'")

(defpoll minutes :interval "30s"
  "date '+%M'")

(defpoll seconds :interval "1s"
  "date '+%S'")

(defpoll date :interval "1h"
  "date '+%d'")

(defpoll day :interval "1h"
  "date '+%a'")

(defpoll month :interval "1h"
  "date '+%b'")

(defwidget clock-module []
  (eventbox :onhover "${EWW_CMD} update clock_reveal=true"
            :onhoverlost "${EWW_CMD} update clock_reveal=false"
            :class "module-container"
    (box :class "clock"
         :orientation "v"
         :space-evenly false
         :spacing 2
         :tooltip "${hours}:${minutes}:${seconds} ${day} ${month} ${date}"
      (clock-time)
      (clock-date))))

(defwidget clock-time []
  (box :orientation "v"
       :space-evenly false
       :spacing 1
    (label :class "clock-hours" :text hours)
    (box :class "clock-separator")
    (label :class "clock-minutes" :text minutes)
    (revealer :transition "slidedown"
              :reveal clock_reveal
              :duration "200ms"
      (label :class "clock-seconds" :text seconds))))

(defwidget clock-date []
  (revealer :transition "slidedown"
            :reveal clock_reveal
            :duration "250ms"
    (box :orientation "v"
         :space-evenly false
         :spacing 2
      (label :class "clock-date" :text date)
      (label :class "clock-day" :text day))))

;; ============================================================================
;; Power Menu
;; ============================================================================

(defvar power_menu_reveal false)

(defwindow power-menu
  :monitor 0
  :geometry (geometry :x "64px"
                     :y "20px"
                     :width "180px"
                     :height "240px"
                     :anchor "bottom right")
  :stacking "overlay"
  (power-menu-widget))

(defwidget power []
  (eventbox :onhover "${EWW_CMD} update power_menu_reveal=true"
            :onhoverlost "${EWW_CMD} update power_menu_reveal=false"
            :class "module-container"
    (box :orientation "v"
         :space-evenly false
      (button :class "module-button power"
              :onclick "${EWW_CMD} open power-menu"
              :tooltip "Power Options"
        (label :class "power-icon" :text "Û∞§Ü"))
      (revealer :transition "slideup"
                :reveal power_menu_reveal
                :duration "250ms"
        (power-menu-widget)))))

(defwidget power-menu-widget []
  (box :class "power-menu-box"
       :orientation "v"
       :space-evenly false
       :spacing 8
    (power-menu-button :class "shutdown-btn" :icon "Û∞ê•" :action "systemctl poweroff" :tooltip "Shutdown")
    (power-menu-button :class "reboot-btn" :icon "Û∞ëô" :action "systemctl reboot" :tooltip "Reboot")
    (power-menu-button :class "suspend-btn" :icon "Û∞í≤" :action "systemctl suspend" :tooltip "Suspend")
    (power-menu-button :class "hibernate-btn" :icon "Û∞í≥" :action "systemctl hibernate" :tooltip "Hibernate")))

(defwidget power-menu-button [class icon action tooltip]
  (button :class "power-menu-btn ${class}"
          :onclick "${action}"
          :tooltip "${tooltip}"
    (label :class "power-menu-icon" :text "${icon}")))

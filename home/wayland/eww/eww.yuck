(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                     :y "0%"
                     :width "40px"
                     :height "100%"
                     :anchor "right center")
  :stacking "fg"
  :exclusive true
  (main-box))

(defwidget main-box []
  (box :orientation "v"
       :space-evenly false
    (workspaces)
    (box :orientation "v"
         :space-evenly false
         :valign "end"
         :vexpand true
      (systray :orientation "v")
      (volume-module)
	  (bluetooth-module)
      (power-profile)
      (battery)
      (brightness-module)
      (clock-module)
      (power))))


;; Workspace state variable with initial empty state
(defvar workspace_state "[]")

;; Poll workspaces with proper JSON array formatting
(defpoll workspace_update :interval "2s"
  :initial "[]"
  :run-while true
  `niri msg -j workspaces | jq -c 'sort_by(.idx)'`)

;; Alternative number styles
(defvar workspace_numbers '[
  "ëôë", "ëôí", "ëôì", "ëôî", "ëôï", "ëôñ", "ëôó", "ëôò", "ëôô", "ëôëëôê"
]')

;; Fixed workspace widget
(defwidget workspaces []
  (eventbox :onhover "${EWW_CMD} update workspace_state=\"$(niri msg -j workspaces | jq -c '.')\""
    (box :class "workspaces"
         :orientation "v"
         :space-evenly false
         :spacing 4
      (for workspace in {workspace_update}
        (button :class "workspace-btn ${workspace.is_focused ? "focused" : ""} ${workspace.is_active ? "active" : ""}"
                :onclick "niri msg workspace-switch ${workspace.id}"
                :tooltip "Workspace ${workspace.idx}"
          (label :class "workspace-number" 
                 :text "${workspace_numbers[workspace.idx - 1] ?: workspace.idx}"))))))

(defpoll volume :interval "1s"
  "wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print int($2 * 100)}'")

(defwidget volume-module []
  (eventbox :onhover "${EWW_CMD} update volume_reveal=true"
            :onhoverlost "${EWW_CMD} update volume_reveal=false"
    (box :class "volume-module"
         :orientation "v"
         :space-evenly false
      (button :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
        (box :orientation "v"
             :space-evenly false
          (label :class "volume-icon" 
                 :text "${volume == 0 ? "Û∞ùü" :
                        volume < 30 ? "Û∞ïø" :
                        volume < 70 ? "Û∞ñÄ" : "Û∞ïæ"}")
          (label :class "volume-text" 
                 :text "${volume}")))
      (revealer :transition "slideup"
                :reveal volume_reveal
                :duration "300ms"
        (scale :class "volume-slider"
               :orientation "v"
               :flipped true
               :min 0
               :max 150
               :height 250
               :value volume
               :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")))))

(defvar volume_reveal false)
(defvar brightness_reveal false)
(defvar clock_reveal false)

(defpoll bluetooth :interval "2s"
  `bluetoothctl show | grep Powered | cut -f 2- -d ' '`)

(defwidget bluetooth-module []
  (button :class "bluetooth ${bluetooth == 'yes' ? 'active' : 'inactive'}"
          :onclick "blueman-manager"
    (box :orientation "v"
         :space-evenly false
      (label :class "bluetooth-icon"
             :text {bluetooth == "yes" ? "Ôäî" : "Û∞Ç≤"}))))

(defpoll power_profile :interval "2s"
  "powerprofilesctl get 2>/dev/null || echo 'balanced'")

(defwidget power-profile []
  (button :class "power-profile"
          :onclick "powerprofilesctl set $(echo '${power_profile}' | awk '{print $1 == \"power-saver\" ? \"balanced\" : $1 == \"balanced\" ? \"performance\" : \"power-saver\"}') || makoclt 'Power Profile Error' 'Failed to switch profile'"
    (label :text {
      power_profile == "power-saver" ? "ÔÅ¨" :    ; Icon for power-saver mode
      power_profile == "balanced" ? "Û±àë" :      ; Icon for balanced mode
      power_profile == "performance" ? "ÔÉß" :   ; Icon for performance mode
      "ÔñÉ"                                      ; Default icon
    })))

(defpoll battery :interval "10s"
  `cat /sys/class/power_supply/BAT0/capacity || cat /sys/class/power_supply/BAT1/capacity`)

(defwidget battery []
  (box :class "battery"
       :orientation "v"
       :space-evenly false
    (label :class "battery-text"
           :text "${battery}")))

(defpoll brightness :interval "1s"
  "brightnessctl -m | cut -d',' -f4 | tr -d '%'")

(defwidget brightness-module []
  (eventbox :onhover "${EWW_CMD} update brightness_reveal=true"
            :onhoverlost "${EWW_CMD} update brightness_reveal=false"
    (box :class "brightness-module"
         :orientation "v"
         :space-evenly false
      (button :class "brightness"
        (box :orientation "v"
             :space-evenly false
          (label :class "brightness-icon"
                 :text {brightness < 20 ? "Û∞Éû" :
                        brightness < 40 ? "Û∞Éü" :
                        brightness < 60 ? "Û∞Éù" :
                        brightness < 80 ? "Û∞É†" : "Û∞É°"})
          (label :class "brightness-text"
                 :text "${brightness}")))
      (revealer :transition "slideup"
                :reveal brightness_reveal
                :duration "300ms"
        (scale :class "brightness-slider"
               :orientation "v"
               :flipped true
               :min 0
               :max 100
               :height 250
               :value brightness
               :onchange "brightnessctl set {}%")))))

(defpoll hours :interval "15s"
  "date '+%H'")

(defpoll minutes :interval "15s"
  "date '+%M'")

(defpoll date :interval "30m"
  "date '+%d'")

(defpoll day :interval "30m"
  "date '+%a'")

(defwidget clock-module []
  (eventbox :onhover "${EWW_CMD} update clock_reveal=true"
            :onhoverlost "${EWW_CMD} update clock_reveal=false"
    (box :class "clock"
         :orientation "v"
         :space-evenly false
      (label :text hours)
      (label :text minutes)
      (revealer :transition "slidedown"
                :reveal clock_reveal
                :duration "300ms"
        (box :orientation "v"
             :space-evenly false
          (label :class "date" :text date)
          (label :class "day" :text day))))))

;; Add these variable definitions
(defvar power_menu_reveal false)

;; Add these widget definitions
(defwindow power-menu
  :monitor 0
  :geometry (geometry :x "60px"
                     :y "20px"
                     :width "200px"
                     :height "280px"
                     :anchor "bottom right")
  :stacking "overlay"
  (power-menu-widget))

(defwidget power-menu-widget []
  (box :class "power-menu-box"
       :orientation "v"
       :space-evenly true
       :spacing 10
    (button :class "power-menu-btn shutdown-btn"
            :onclick "systemctl poweroff"
      (box :space-evenly false
           :spacing 8
        (label :text "‚èª")))
    (button :class "power-menu-btn reboot-btn"
            :onclick "systemctl reboot"
      (box :space-evenly false
           :spacing 8
        (label :text "Û∞ëô")))
    (button :class "power-menu-btn suspend-btn"
            :onclick "systemctl suspend"
      (box :space-evenly false
           :spacing 8
        (label :text "Û∞í≤")))
    (button :class "power-menu-btn hibernate-btn"
            :onclick "systemctl hibernate"
      (box :space-evenly false
           :spacing 8
        (label :text "Û∞í≥")))))

;; Replace your existing power widget with this
(defwidget power []
  (eventbox :onhover "${EWW_CMD} update power_menu_reveal=true"
            :onhoverlost "${EWW_CMD} update power_menu_reveal=false"
    (box :orientation "v"
         :space-evenly false
      (button :class "power"
              :onclick "${EWW_CMD} open power-menu"
        (label :text "Û∞§Ü"))
      (revealer :transition "slideup"
                :reveal power_menu_reveal
                :duration "300ms"
        (power-menu-widget)))))


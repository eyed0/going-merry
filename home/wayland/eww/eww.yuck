;; ============================================================================
;; Main Window and Container Definitions
;; ============================================================================

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                     :y "0%"
                     :width "40px"
                     :height "100%"
                     :anchor "right center")
  :stacking "fg"
  :exclusive true
  (main-box))

(defwidget main-box []
  (box :orientation "v"
       :space-evenly false
    (workspaces)
    (status-modules)))

(defwidget status-modules []
  (box :orientation "v"
       :space-evenly false
       :valign "end"
       :vexpand true
    (systray :orientation "v")
    (top-modules)
    (bottom-modules)))

(defwidget top-modules []
  (box :orientation "v"
       :space-evenly false
    (volume-module)
    (bluetooth-module)
    (power-profile)
    (battery)
    (brightness-module)))

(defwidget bottom-modules []
  (box :orientation "v"
       :space-evenly false
    (notification-module)
    (clock-module)
    (power)))

;; ============================================================================
;; Workspace Module
;; ============================================================================

(defvar workspace_state "[]")
(defvar workspace_numbers '[
  "ëôë", "ëôí", "ëôì", "ëôî", "ëôï", "ëôñ", "ëôó", "ëôò", "ëôô", "ëôëëôê"
]')

(defpoll workspace_update :interval "2s"
  :initial "[]"
  :run-while true
  `niri msg -j workspaces | jq -c 'sort_by(.idx)'`)

(defwidget workspaces []
  (eventbox :onhover "${EWW_CMD} update workspace_state=\"$(niri msg -j workspaces | jq -c '.')\""
    (box :class "workspaces"
         :orientation "v"
         :space-evenly false
         :spacing 4
      (for workspace in {workspace_update}
        (workspace-button :workspace workspace)))))

(defwidget workspace-button [workspace]
  (button :class "workspace-btn ${workspace.is_focused ? "focused" : ""} ${workspace.is_active ? "active" : ""}"
          :onclick "niri msg workspace-switch ${workspace.id}"
          :tooltip "Workspace ${workspace.idx}"
    (label :class "workspace-number" 
           :text "${workspace_numbers[workspace.idx - 1] ?: workspace.idx}")))

;; ============================================================================
;; Audio Module
;; ============================================================================

(defvar volume_reveal false)

(defpoll volume :interval "1s"
  "wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print int($2 * 100)}'")

(defwidget volume-module []
  (eventbox :onhover "${EWW_CMD} update volume_reveal=true"
            :onhoverlost "${EWW_CMD} update volume_reveal=false"
    (box :class "volume-module"
         :orientation "v"
         :space-evenly false
		 :tooltip "Volume: ${volume}%"
      (volume-button)
      (volume-slider))))

(defwidget volume-button []
  (button :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    (box :orientation "v"
         :space-evenly false
      (label :class "volume-icon" 
             :text "${volume == 0 ? "Û∞ùü" :
                    volume < 30 ? "Û∞ïø" :
                    volume < 70 ? "Û∞ñÄ" : "Û∞ïæ"}")
      (label :class "volume-text" 
             :text "${volume}"))))

(defwidget volume-slider []
  (revealer :transition "slideup"
            :reveal volume_reveal
            :duration "300ms"
    (scale :class "volume-slider"
           :orientation "v"
           :flipped true
           :min 0
           :max 150
           :height 250
           :value volume
           :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")))

;; ============================================================================
;; System Modules (Bluetooth, Power Profile, Battery)
;; ============================================================================

(defpoll bluetooth :interval "2s"
  `bluetoothctl show | grep Powered | cut -f 2- -d ' '`)

(defwidget bluetooth-module []
  (button :class "bluetooth ${bluetooth == 'yes' ? 'active' : 'inactive'}"
          :onclick "blueman-manager"
		  :tooltip "Bluetooth ${bluetooth == 'yes' ? 'On' : 'Off'}"
    (box :orientation "v"
         :space-evenly false
      (label :class "bluetooth-icon"
             :text {bluetooth == "yes" ? "" : "Û∞Ç≤"}))))

(defpoll power_profile :interval "2s"
  "powerprofilesctl get 2>/dev/null || echo 'balanced'")

(defwidget power-profile []
  (button :class "power-profile"
          :onclick "powerprofilesctl set $(echo '${power_profile}' | awk '{print $1 == \"power-saver\" ? \"balanced\" : $1 == \"balanced\" ? \"performance\" : \"power-saver\"}') || makoclt 'Power Profile Error' 'Failed to switch profile'"
		  :tooltip "Power Profile: ${power_profile}"
    (label :text {
      power_profile == "power-saver" ? "Û±àë" :
      power_profile == "balanced" ? "Û∞Åπ" :
      power_profile == "performance" ? "Û±êå" :
      ""
    })))

(defpoll battery :interval "10s"
  `cat /sys/class/power_supply/BAT0/capacity || cat /sys/class/power_supply/BAT1/capacity`)

(defwidget battery []
  (box :class "battery"
       :orientation "v"
       :space-evenly false
	   :tooltip "Battery: ${battery}%"
    (label :class "battery-text"
           :text "${battery}")))

;; ============================================================================
;; Brightness Module
;; ============================================================================

(defvar brightness_reveal false)

(defpoll brightness :interval "1s"
  "brightnessctl -m | cut -d',' -f4 | tr -d '%'")

(defwidget brightness-module []
  (eventbox :onhover "${EWW_CMD} update brightness_reveal=true"
            :onhoverlost "${EWW_CMD} update brightness_reveal=false"
    (box :class "brightness-module"
         :orientation "v"
         :space-evenly false
		 :tooltip "Brightness: ${brightness}%"
      (brightness-button)
      (brightness-slider))))

(defwidget brightness-button []
  (button :class "brightness"
    (box :orientation "v"
         :space-evenly false
      (label :class "brightness-icon"
             :text {brightness < 20 ? "Û∞Éû" :
                    brightness < 40 ? "Û∞Éü" :
                    brightness < 60 ? "Û∞Éù" :
                    brightness < 80 ? "Û∞É†" : "Û∞É°"})
      (label :class "brightness-text"
             :text "${brightness}"))))

(defwidget brightness-slider []
  (revealer :transition "slideup"
            :reveal brightness_reveal
            :duration "300ms"
    (scale :class "brightness-slider"
           :orientation "v"
           :flipped true
           :min 0
           :max 100
           :height 250
           :value brightness
           :onchange "brightnessctl set {}%")))

;; ============================================================================
;; Clock Module
;; ============================================================================

(defvar clock_reveal false)

(defpoll hours :interval "15s"
  "date '+%H'")

(defpoll minutes :interval "15s"
  "date '+%M'")

(defpoll date :interval "30m"
  "date '+%d'")

(defpoll day :interval "30m"
  "date '+%a'")

(defwidget clock-module []
  (eventbox :onhover "${EWW_CMD} update clock_reveal=true"
            :onhoverlost "${EWW_CMD} update clock_reveal=false"
    (box :class "clock"
         :orientation "v"
         :space-evenly false
		 :tooltip "${hours}:${minutes} ${day}"
      (clock-time)
      (clock-date))))

(defwidget clock-time []
  (box :orientation "v"
       :space-evenly false
    (label :text hours)
    (label :text minutes)))

(defwidget clock-date []
  (revealer :transition "slidedown"
            :reveal clock_reveal
            :duration "300ms"
    (box :orientation "v"
         :space-evenly false
      (label :class "date" :text date)
      (label :class "day" :text day))))

;; ============================================================================
;; Power Menu
;; ============================================================================

(defvar power_menu_reveal false)

(defwindow power-menu
  :monitor 0
  :geometry (geometry :x "60px"
                     :y "20px"
                     :width "200px"
                     :height "280px"
                     :anchor "bottom right")
  :stacking "overlay"
  (power-menu-widget))

(defwidget power []
  (eventbox :onhover "${EWW_CMD} update power_menu_reveal=true"
            :onhoverlost "${EWW_CMD} update power_menu_reveal=false"
    (box :orientation "v"
         :space-evenly false
      (button :class "power"
              :onclick "${EWW_CMD} open power-menu"
        (label :text "Û∞§Ü"))
      (revealer :transition "slideup"
                :reveal power_menu_reveal
                :duration "300ms"
        (power-menu-widget)))))

(defwidget power-menu-widget []
  (box :class "power-menu-box"
       :orientation "v"
       :space-evenly true
       :spacing 10
    (power-menu-button :class "shutdown-btn" :icon "‚èª" :action "systemctl poweroff")
    (power-menu-button :class "reboot-btn" :icon "Û∞ëô" :action "systemctl reboot")
    (power-menu-button :class "suspend-btn" :icon "Û∞í≤" :action "systemctl suspend")
    (power-menu-button :class "hibernate-btn" :icon "Û∞í≥" :action "systemctl hibernate")))

(defwidget power-menu-button [class icon action]
  (button :class "power-menu-btn ${class}"
          :onclick "${action}"
    (box :space-evenly false
         :spacing 8
      (label :text "${icon}"))))

;; ============================================================================
;; Notification Module
;; ============================================================================

(defvar notifications_reveal false)
(defvar notifications_count 0)

(defpoll notifications :interval "5s"
  `makoctl list | jq '.data[0] | length'`)

(defwidget notification-module []
  (eventbox :onhover "${EWW_CMD} update notifications_reveal=true"
            :onhoverlost "${EWW_CMD} update notifications_reveal=false"
    (box :class "notification-module"
         :orientation "v"
         :space-evenly false
		 :tooltip "${notifications} notification(s)"
      (notification-button)
      (notification-details))))

(defwidget notification-button []
  (button :class "notification-btn"
          :onclick "makoctl dismiss"
    (box :orientation "v"
         :space-evenly false
      (label :class "notification-icon"
             :text {notifications == 0 ? "Û±Ö´" : ""})
      (label :class "notification-count"
             :text "${notifications}"))))

(defwidget notification-details []
  (revealer :transition "slideup"
            :reveal notifications_reveal
            :duration "300ms"
    (box :class "notification-details"
         :orientation "v"
         :space-evenly false
      (button :class "clear-notifications"
              :onclick "makoctl dismiss -a"
        (label :text "Û∞éü"))
      (button :class "notification-center"
              :onclick "makoctl list"
        (label :text "Û∞Çü")))))

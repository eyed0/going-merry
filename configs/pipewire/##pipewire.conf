# Daemon config file for PipeWire version "1.0.3" #

context.properties = {
    # Core settings
    link.max-buffers = 16
    core.daemon = true
    core.name = pipewire-0

    # High-quality audio settings
    default.clock.rate = 96000
    default.clock.quantum = 1024
    default.clock.min-quantum = 1024
    default.clock.max-quantum = 2048
    
    # VM overrides
    vm.overrides = {
        default.clock.min-quantum = 1024
    }

    # Module loading controls
    module.x11.bell = true
    module.access = true
    module.jackdbus-detect = true
}

context.spa-libs = {
    audio.convert.* = audioconvert/libspa-audioconvert
    avb.* = avb/libspa-avb
    api.alsa.* = alsa/libspa-alsa
    api.v4l2.* = v4l2/libspa-v4l2
    api.libcamera.* = libcamera/libspa-libcamera
    api.bluez5.* = bluez5/libspa-bluez5
    api.vulkan.* = vulkan/libspa-vulkan
    api.jack.* = jack/libspa-jack
    support.* = support/libspa-support
}

context.modules = [
    # Realtime scheduling
    { name = libpipewire-module-rt
        args = {
            nice.level = -11
            rt.prio = 88
            rt.time.soft = -1
            rt.time.hard = -1
        }
        flags = [ ifexists nofail ]
    }

    # Standard modules
    { name = libpipewire-module-protocol-native }
    { name = libpipewire-module-profiler }
    { name = libpipewire-module-metadata }
    { name = libpipewire-module-spa-device-factory }
    { name = libpipewire-module-spa-node-factory }
    { name = libpipewire-module-client-node }
    { name = libpipewire-module-client-device }
    
    { name = libpipewire-module-portal
        flags = [ ifexists nofail ]
    }
    
    { name = libpipewire-module-access
        condition = [ { module.access = true } ]
    }
    
    { name = libpipewire-module-adapter }
    { name = libpipewire-module-link-factory }
    { name = libpipewire-module-session-manager }
    
    { name = libpipewire-module-x11-bell
        flags = [ ifexists nofail ]
        condition = [ { module.x11.bell = true } ]
    }
    
    { name = libpipewire-module-jackdbus-detect
        flags = [ ifexists nofail ]
        condition = [ { module.jackdbus-detect = true } ]
    }

    # Virtual Surround with Spatial Processing
    { name = libpipewire-module-filter-chain
        flags = [ nofail ]
        args = {
            node.description = "Virtual Surround Sink"
            media.name = "Virtual Surround Sink"
            filter.graph = {
                nodes = [
                    # Input stage - duplicate stereo input for processing
                    { type = builtin label = copy name = copyL }
                    { type = builtin label = copy name = copyR }
                    
                    # Spatial Enhancement Stage
                    # 1. Stereo Enhancer (bs2b for better crossfeed)
                    { type = ladspa label = bs2b name = spatial_enhancer
                      plugin = "bs2b" 
                      control = {
                        "Feed" = 0.8
                        "Fcut" = 650.0
                      }
                    }
                    
                    # 2. Room Ambience (basic reverb for spatial effect)
                    { type = ladspa label = "G2reverb" name = room_ambience
                      plugin = "g2reverb" 
                      control = {
                        "Dry Level (dB)" = 0.0
                        "Early Level (dB)" = -20.0
                        "Tail Level (dB)" = -26.0
                        "Room Size (m)" = 20.0
                        "Reverb Time (s)" = 1.2
                        "Damping" = 0.3
                        "Input Bandwidth" = 0.8
                        "Tail Density" = 0.7
                      }
                    }
                    
                    # 3. Stereo Expander for width
                    { type = ladspa label = "Stereo Enhancer" name = width_enhancer
                      plugin = "se4" 
                      control = {
                        "Band 1 Gain" = 0.3
                        "Band 1 Freq" = 200.0
                        "Band 1 Width" = 1.6
                        "Band 2 Gain" = 0.3
                        "Band 2 Freq" = 1000.0
                        "Band 2 Width" = 1.8
                        "Band 3 Gain" = 0.3
                        "Band 3 Freq" = 5000.0
                        "Band 3 Width" = 1.5
                        "Master Width" = 1.3
                      }
                    }
                    
                    # 4. Convolver for virtual surround effect
                    { type = builtin label = convolver name = conv_surroundL
                      config = {
                        filename = "/home/heehaw/.config/pipewire/atmos.wav"
                        channel = 0
                        gain = 1.0
                        delay = 0
                        offset = 0
                        length = 0
                        drywet = 0.7
                      }
                    }
                    { type = builtin label = convolver name = conv_surroundR
                      config = {
                        filename = "/home/heehaw/.config/pipewire/atmos.wav"
                        channel = 1
                        gain = 1.0
                        delay = 0
                        offset = 0
                        length = 0
                        drywet = 0.7
                      }
                    }
                    
                    # Output mixers
                    { type = builtin label = mixer name = mixL }
                    { type = builtin label = mixer name = mixR }
                ]
                links = [
                    # Input stage
                    { output = "copyL:Out" input = "spatial_enhancer:Input 1" }
                    { output = "copyR:Out" input = "spatial_enhancer:Input 2" }
                    
                    # Spatial processing chain
                    { output = "spatial_enhancer:Output 1" input = "room_ambience:Input 1" }
                    { output = "spatial_enhancer:Output 2" input = "room_ambience:Input 2" }
                    { output = "room_ambience:Output 1" input = "width_enhancer:Input 1" }
                    { output = "room_ambience:Output 2" input = "width_enhancer:Input 2" }
                    
                    # To convolver
                    { output = "width_enhancer:Output 1" input = "conv_surroundL:In" }
                    { output = "width_enhancer:Output 2" input = "conv_surroundR:In" }
                    
                    # Final output mix
                    { output = "conv_surroundL:Out" input = "mixL:In 1" }
                    { output = "conv_surroundR:Out" input = "mixR:In 1" }
                ]
                inputs = [ "copyL:In" "copyR:In" ]
                outputs = [ "mixL:Out" "mixR:Out" ]
            }
            capture.props = {
                node.name = "effect_input.virtual-surround-stereo"
                media.class = Audio/Sink
                audio.channels = 2
                audio.position = [ FL FR ]
            }
            playback.props = {
                node.name = "effect_output.virtual-surround-stereo"
                node.passive = true
                audio.channels = 2
                audio.position = [ FL FR ]
            }
        }
    }
]

context.objects = [
    # Dummy driver
    { factory = spa-node-factory
        args = {
            factory.name = support.node.driver
            node.name = Dummy-Driver
            node.group = pipewire.dummy
            priority.driver = 20000
        }
    }
    { factory = spa-node-factory
        args = {
            factory.name = support.node.driver
            node.name = Freewheel-Driver
            priority.driver = 19000
            node.group = pipewire.freewheel
            node.freewheel = true
        }
    }
]

context.exec = [
    # You can add exec commands here if needed
]